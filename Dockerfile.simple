# Simplified Dockerfile for custom Navidrome build

# Stage 1: Get pre-built TagLib with DSF support
FROM alpine:3.19 AS taglib-build
ARG CROSS_TAGLIB_VERSION=2.1.1-1
ENV CROSS_TAGLIB_RELEASES_URL=https://github.com/navidrome/cross-taglib/releases/download/v${CROSS_TAGLIB_VERSION}/

RUN apk add --no-cache wget tar && \
    ARCH="$(uname -m)" && \
    case "${ARCH}" in \
        x86_64) PLATFORM="linux-amd64" ;; \
        aarch64) PLATFORM="linux-arm64" ;; \
        armv7l) PLATFORM="linux-arm-v7" ;; \
        armv6l) PLATFORM="linux-arm-v6" ;; \
        *) echo "Unsupported architecture: ${ARCH}" && exit 1 ;; \
    esac && \
    FILE="taglib-${PLATFORM}.tar.gz" && \
    DOWNLOAD_URL="${CROSS_TAGLIB_RELEASES_URL}${FILE}" && \
    echo "Downloading ${DOWNLOAD_URL}..." && \
    wget ${DOWNLOAD_URL} && \
    mkdir /taglib && \
    tar -xzf ${FILE} -C /taglib

# Stage 2: Build UI
FROM node:18-alpine AS ui-builder

WORKDIR /build/ui

# Copy all UI files (bin scripts needed for npm install)
COPY ui/ ./

# Install and build
RUN npm ci && npm run build

# Stage 3: Build Navidrome
FROM golang:1.24-bookworm AS go-builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    pkg-config \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Copy pre-built TagLib
COPY --from=taglib-build /taglib /taglib

# Set up TagLib for compilation
ENV CGO_ENABLED=1
ENV PKG_CONFIG_PATH=/taglib/lib/pkgconfig

# Copy go.mod and go.sum first
COPY go.mod go.sum ./

# Download dependencies (external only)
RUN go mod download

# Copy all source code (including internal packages)
COPY . .

# Copy built UI
COPY --from=ui-builder /build/ui/build ./ui/build

# Build with TagLib
ARG GIT_SHA=dev
ARG GIT_TAG=v0.58.0-QO
RUN go build -tags=netgo \
    -ldflags="-extldflags '-static' -X github.com/navidrome/navidrome/consts.gitSha=${GIT_SHA} -X github.com/navidrome/navidrome/consts.gitTag=${GIT_TAG}" \
    -o navidrome .

# Stage 4: Runtime (use Alpine for smaller image)
FROM alpine:3.19

# Install runtime dependencies
RUN apk add --no-cache \
    ffmpeg \
    taglib \
    ca-certificates

# Create user and directories
RUN adduser -D -u 1000 navidrome && \
    mkdir -p /data /music /app && \
    chown -R navidrome:navidrome /data /music /app

# Copy binary
COPY --from=go-builder /build/navidrome /app/navidrome
RUN chmod +x /app/navidrome

USER navidrome
WORKDIR /app

EXPOSE 4533

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ["/app/navidrome", "ping"]

ENTRYPOINT ["/app/navidrome"]
CMD []
